                                    //\n                                                                                                                       //\n          if (operator === '$regex' && !subSelector.$options) {                                                        // 372\n            constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector));                   // 373\n          } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                               // 376\n                                                                                                                       //\n        });                                                                                                            // 379\n                                                                                                                       //\n        return;                                                                                                        // 380\n      } // OK, it's an equality thing.                                                                                 // 381\n                                                                                                                       //\n                                                                                                                       //\n      constraints.push(equalityElementMatcher(subSelector));                                                           // 384\n    }); // It appears that the first sort field is treated differently from the                                        // 385\n    // others; we shouldn't create a key filter unless the first sort field is                                         // 388\n    // restricted, though after that point we can restrict the other sort fields                                       // 389\n    // or not as we wish.                                                                                              // 390\n                                                                                                                       //\n                                                                                                                       //\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path])) return;                                             // 391\n                                                                                                                       //\n    self._keyFilter = function (key) {                                                                                 // 394\n      return _.all(self._sortSpecParts, function (specPart, index) {                                                   // 395\n        return _.all(constraintsByPath[specPart.path], function (f) {                                                  // 396\n          return f(key[index]);                                                                                        // 397\n        });                                                                                                            // 398\n      });                                                                                                              // 399\n    };                                                                                                                 // 400\n  }                                                                                                                    // 401\n}); // Given an array of comparators                                                                                   // 80\n// (functions (a,b)->(negative or positive or zero)), returns a single                                                 // 405\n// comparator which uses each comparator in order and returns the first                                                // 406\n// non-zero value.                                                                                                     // 407\n                                                                                                                       //\n                                                                                                                       //\nvar composeComparators = function (comparatorArray) {                                                                  // 408\n  return function (a, b) {                                                                                             // 409\n    for (var i = 0; i < comparatorArray.length; ++i) {                                                                 // 410\n      var compare = comparatorArray[i](a, b);                                                                          // 411\n      if (compare !== 0) return compare;                                                                               // 412\n    }                                                                                                                  // 414\n                                                                                                                       //\n    return 0;                                                                                                          // 415\n  };                                                                                                                   // 416\n};                                                                                                                     // 417\n///////////////////////////////////////////////////////////////////////////